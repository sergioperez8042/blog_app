import mongoose, { Document, Schema, Model } from 'mongoose';

// Interfaz para el documento Post
export interface IPost extends Document {
  title: string;
  category: string;
  content: string;
  createdAt: Date;
  author: string;
  isAutoGenerated?: boolean;
  source?: string;
  aiModel?: string; // Cambié 'model' por 'aiModel' para evitar conflicto
  confidence?: number;
  likes: number;
  media?: {
    type: 'image' | 'video';
    url: string;
    filename: string;
    size: number;
    mimeType: string;
  };
  // Métodos de instancia
  incrementLikes(): Promise<IPost>;
}

// Interfaz para métodos estáticos
export interface IPostModel extends Model<IPost> {
  getMostPopular(limit?: number): Promise<IPost[]>;
  getRecent(limit?: number): Promise<IPost[]>;
  getByCategory(category: string, limit?: number): Promise<IPost[]>;
}

// Schema de MongoDB para Posts
const PostSchema: Schema = new Schema({
  title: {
    type: String,
    required: true,
    trim: true,
    maxlength: 200
  },
  category: {
    type: String,
    required: true,
    enum: ['Technology', 'Travel', 'Food', 'Fashion', 'Culture', 'Style', 'Coding']
  },
  content: {
    type: String,
    required: true,
    minlength: 10
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  author: {
    type: String,
    required: true,
    trim: true
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  source: {
    type: String,
    trim: true
  },
  aiModel: {
    type: String,
    trim: true
  },
  confidence: {
    type: Number,
    min: 0,
    max: 1
  },
  likes: {
    type: Number,
    default: 0,
    min: 0
  },
  media: {
    type: {
      type: String,
      enum: ['image', 'video'],
      required: false
    },
    url: {
      type: String,
      required: false
    },
    filename: {
      type: String,
      required: false
    },
    size: {
      type: Number,
      required: false
    },
    mimeType: {
      type: String,
      required: false
    }
  }
}, {
  timestamps: true, // Agrega createdAt y updatedAt automáticamente
  toJSON: { virtuals: true }, // Incluye virtuals en JSON
  toObject: { virtuals: true }
});

// Índices para optimizar consultas
PostSchema.index({ createdAt: -1 }); // Ordenar por fecha
PostSchema.index({ likes: -1 }); // Ordenar por likes
PostSchema.index({ category: 1 }); // Filtrar por categoría
PostSchema.index({ author: 1 }); // Filtrar por autor

// Método virtual para obtener el ID como string
PostSchema.virtual('id').get(function() {
  return (this._id as mongoose.Types.ObjectId).toHexString();
});

// Método estático para obtener posts populares
PostSchema.statics.getMostPopular = function(limit = 10) {
  return this.find().sort({ likes: -1, createdAt: -1 }).limit(limit);
};

// Método estático para obtener posts recientes
PostSchema.statics.getRecent = function(limit = 10) {
  return this.find().sort({ createdAt: -1 }).limit(limit);
};

// Método estático para obtener posts por categoría
PostSchema.statics.getByCategory = function(category: string, limit = 10) {
  return this.find({ category }).sort({ createdAt: -1 }).limit(limit);
};

// Método de instancia para incrementar likes
PostSchema.methods.incrementLikes = function() {
  this.likes += 1;
  return this.save();
};

// Evitar recompilación del modelo
let Post: IPostModel;

try {
  Post = mongoose.model<IPost, IPostModel>('Post');
} catch (error) {
  Post = mongoose.model<IPost, IPostModel>('Post', PostSchema);
}

export default Post;
