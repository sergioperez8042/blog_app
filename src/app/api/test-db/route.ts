import { NextRequest, NextResponse } from 'next/server';
import { PostStore } from '@/lib/postStore';

export async function POST(request: NextRequest) {
  try {
    const { action } = await request.json();

    if (action === 'test-connection') {
      // Probar conexión básica
      const posts = await PostStore.getAllPosts();
      return NextResponse.json({
        success: true,
        message: 'Conexión a MongoDB exitosa',
        postsCount: posts.length,
        environment: process.env.NODE_ENV
      });
    }

    if (action === 'create-test-post') {
      // Crear un post de prueba
      const testPost = {
        id: Date.now().toString(),
        title: 'Test Post - ' + new Date().toISOString(),
        category: 'Technology',
        content: 'Este es un post de prueba para verificar que la base de datos funciona correctamente.',
        createdAt: new Date().toISOString(),
        author: 'Test User',
        isAutoGenerated: false,
        likes: 0
      };

      const savedPost = await PostStore.addPost(testPost);
      
      if (savedPost) {
        return NextResponse.json({
          success: true,
          message: 'Post de prueba creado exitosamente',
          post: savedPost
        });
      } else {
        return NextResponse.json({
          success: false,
          message: 'No se pudo crear el post de prueba'
        }, { status: 500 });
      }
    }

    return NextResponse.json({
      error: 'Acción no válida. Usa "test-connection" o "create-test-post"'
    }, { status: 400 });

  } catch (error: any) {
    console.error('Error en test:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      stack: error.stack
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Endpoint de testing para MongoDB',
    actions: [
      'POST con {"action": "test-connection"} - Probar conexión',
      'POST con {"action": "create-test-post"} - Crear post de prueba'
    ]
  });
}
