'use client';

import React, { useState, useEffect } from 'react';
import styles from './page.module.css';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { PostStore } from '@/lib/postStore';

export default function WritePage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: '',
    category: 'Technology',
    content: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [createdPostId, setCreatedPostId] = useState<string | null>(null);
  const router = useRouter();

  const categories = [
    'Technology',
    'Travel', 
    'Food',
    'Fashion',
    'Culture',
    'Coding'
  ];

  useEffect(() => {
    // Verificar autenticaci√≥n
    const authData = localStorage.getItem('blogAuth');
    if (!authData) {
      router.push('/login');
      return;
    }
    
    try {
      JSON.parse(authData);
      setIsAuthenticated(true);
    } catch (error) {
      localStorage.removeItem('blogAuth');
      router.push('/login');
      return;
    }
    
    setLoading(false);
  }, [router]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setMessage(null);
    setCreatedPostId(null);

    try {
      // Crear el post directamente en PostStore
      const newPost = {
        id: Date.now().toString(),
        title: formData.title,
        category: formData.category,
        content: formData.content,
        createdAt: new Date().toISOString(),
        author: 'Admin User',
        isAutoGenerated: false,
        likes: 0
      };

      // Agregar al PostStore
      PostStore.addPost(newPost);

      // Tambi√©n enviar a la API para sincronizaci√≥n
      try {
        const response = await fetch('/api/posts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title: formData.title,
            category: formData.category,
            content: formData.content,
            author: 'Admin User',
            isAutoGenerated: false
          }),
        });

        if (!response.ok) {
          console.warn('Warning: API sync failed, but post was saved locally');
        }
      } catch (apiError) {
        console.warn('Warning: API sync failed, but post was saved locally:', apiError);
      }

      setCreatedPostId(newPost.id);
      setMessage({
        type: 'success',
        text: '¬°Post creado exitosamente! üéâ'
      });

      // Limpiar formulario
      setFormData({
        title: '',
        category: 'Technology',
        content: '',
      });

    } catch (error: any) {
      setMessage({
        type: 'error',
        text: error.message || 'Error al crear el post'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>
          <h2>Verificando autenticaci√≥n...</h2>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>‚úçÔ∏è Escribir Nuevo Post</h1>
        <p className={styles.subtitle}>
          Crea contenido personalizado para tu blog
        </p>
      </div>

      <div className={styles.formContainer}>
        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.inputGroup}>
            <label htmlFor="title" className={styles.label}>
              T√≠tulo del Post
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              className={styles.input}
              placeholder="Escribe un t√≠tulo atractivo..."
              required
            />
          </div>

          <div className={styles.inputGroup}>
            <label htmlFor="category" className={styles.label}>
              Categor√≠a
            </label>
            <select
              id="category"
              name="category"
              value={formData.category}
              onChange={handleInputChange}
              className={styles.select}
              required
            >
              {categories.map(category => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.inputGroup}>
            <label htmlFor="content" className={styles.label}>
              Contenido
            </label>
            <textarea
              id="content"
              name="content"
              value={formData.content}
              onChange={handleInputChange}
              className={styles.textarea}
              placeholder="Escribe el contenido de tu post aqu√≠..."
              rows={12}
              required
            />
            <div className={styles.charCount}>
              {formData.content.length} caracteres
            </div>
          </div>

          {message && (
            <div className={`${styles.message} ${styles[message.type]}`}>
              {message.text}
              {message.type === 'success' && createdPostId && (
                <div className={styles.viewPostContainer}>
                  <button
                    onClick={() => router.push(`/posts/${createdPostId}`)}
                    className={styles.viewPostButton}
                  >
                    üëÅÔ∏è Ver Post
                  </button>
                </div>
              )}
            </div>
          )}

          <div className={styles.actions}>
            <Link href="/admin" className={styles.cancelButton}>
              Cancelar
            </Link>
            <button 
              type="submit" 
              className={styles.submitButton}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Publicando...' : 'Publicar Post'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
